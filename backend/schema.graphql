type LoginPayload {
  token: String
  user: User
}

type Nro {
  about: String
  context: String
  expensesCampaigns: Float
  expensesCampaignSupport: Float
  expensesContributions: Float
  expensesOrgSupport: Float
  id: ID!
  incomeFundraising: Float
  incomeGrants: Float
  incomeOther: Float
  name: String!
  programmeBalanceDirect: Float
  programmeBalanceStaff: Float
  programmeBudgetCampaignCoordination: Float
  programmeBudgetCampaigns: Float
  programmeBudgetCampaignUnallocated: Float
  programmeBudgetEngagement: Float
  programmeBudgetMediaComms: Float
  programmeBudgetOperations: Float
  programmeBudgetPolitical: Float
  programmeBudgetPublicInfoOutreach: Float
  programmeStaffCampaignCoordination: Float
  programmeStaffCampaigns: Float
  programmeStaffCampaignUnallocated: Float
  programmeStaffEngagement: Float
  programmeStaffMediaComms: Float
  programmeStaffOperations: Float
  programmeStaffPolitical: Float
  programmeStaffPublicInfoOutreach: Float
  staffCampaigns: Float
  staffCampaignSupport: Float
  staffFundraising: Float
  staffOrgSupport: Float
}

type User {
  email: String!
  id: ID!
  isAdmin: Boolean!
  name: String!
}

type ProjectGroup {
  id: ID!
  name: String!
  description: String
}

type NroProject {
  id: ID!
  meta: String
  name: String!
  projectGroup: ProjectGroup!
  nro: Nro!
  staffTotal: Float
  budgetTotal: Float
  additionalInfo: String
  staffCampaignCoordination: Float
  staffCampaigns: Float
  staffEngagement: Float
  staffMarine: Float
  staffMediaComms: Float
  staffPolitical: Float
  staffPublicInfoOutreach: Float
  staffFundraising: Float
  staffOther: Float
}

type Query {
  me: User
  nros: [Nro!]
  projectGroups: [ProjectGroup!]
  nroProjects: [NroProject!]
}

type Mutation {
  login(email: String, password: String): LoginPayload
}
