/**
 * This file was automatically generated by nexus-prisma@0.3.6
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Nro: NroObject
      NroConnection: NroConnectionObject
      NroEdge: NroEdgeObject
      AggregateNro: AggregateNroObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      NroSubscriptionPayload: NroSubscriptionPayloadObject
      NroPreviousValues: NroPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Nro: NroFieldDetails
      NroConnection: NroConnectionFieldDetails
      NroEdge: NroEdgeFieldDetails
      AggregateNro: AggregateNroFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      NroSubscriptionPayload: NroSubscriptionPayloadFieldDetails
      NroPreviousValues: NroPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      NroWhereUniqueInput: NroWhereUniqueInputInputObject
      NroWhereInput: NroWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      NroCreateInput: NroCreateInputInputObject
      NroUpdateInput: NroUpdateInputInputObject
      NroUpdateManyMutationInput: NroUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      NroSubscriptionWhereInput: NroSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    NroOrderByInput: NroOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'nro', args?: QueryNroArgs[] | false, alias?: string  } 
  | { name: 'nroes', args?: QueryNroesArgs[] | false, alias?: string  } 
  | { name: 'nroesConnection', args?: QueryNroesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'nro'
  | 'nroes'
  | 'nroesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNroArgs =
  | 'where'
type QueryNroesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNroesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  nro: {
    type: 'Nro'
    args: Record<QueryNroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro | null> | prisma.Nro | null
  }
  nroes: {
    type: 'Nro'
    args: Record<QueryNroesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NroWhereInput | null, orderBy?: prisma.NroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro[]> | prisma.Nro[]
  }
  nroesConnection: {
    type: 'NroConnection'
    args: Record<QueryNroesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NroWhereInput | null, orderBy?: prisma.NroOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NroConnection> | prisma.NroConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isAdmin', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'isAdmin'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isAdmin: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Nro

type NroObject =
  | NroFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'about', args?: [] | false, alias?: string  } 
  | { name: 'incomeGrants', args?: [] | false, alias?: string  } 
  | { name: 'incomeFundraising', args?: [] | false, alias?: string  } 
  | { name: 'incomeOther', args?: [] | false, alias?: string  } 
  | { name: 'expensesCampaigns', args?: [] | false, alias?: string  } 
  | { name: 'expensesCampaignSupport', args?: [] | false, alias?: string  } 
  | { name: 'expensesContributions', args?: [] | false, alias?: string  } 
  | { name: 'expensesOrgSupport', args?: [] | false, alias?: string  } 
  | { name: 'staffCampaigns', args?: [] | false, alias?: string  } 
  | { name: 'staffCampaignSupport', args?: [] | false, alias?: string  } 
  | { name: 'staffFundraising', args?: [] | false, alias?: string  } 
  | { name: 'staffOrgSupport', args?: [] | false, alias?: string  } 

type NroFields =
  | 'id'
  | 'name'
  | 'about'
  | 'incomeGrants'
  | 'incomeFundraising'
  | 'incomeOther'
  | 'expensesCampaigns'
  | 'expensesCampaignSupport'
  | 'expensesContributions'
  | 'expensesOrgSupport'
  | 'staffCampaigns'
  | 'staffCampaignSupport'
  | 'staffFundraising'
  | 'staffOrgSupport'



  

export interface NroFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  about: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  incomeGrants: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  incomeFundraising: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  incomeOther: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesCampaigns: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesCampaignSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesContributions: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesOrgSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffCampaigns: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffCampaignSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffFundraising: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffOrgSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for NroConnection

type NroConnectionObject =
  | NroConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NroConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NroConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NroEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NroEdge[]> | prisma.NroEdge[]
  }
  aggregate: {
    type: 'AggregateNro'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NroConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNro> | prisma.AggregateNro
  }
}
  

// Types for NroEdge

type NroEdgeObject =
  | NroEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NroEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NroEdgeFieldDetails {
  node: {
    type: 'Nro'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NroEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro> | prisma.Nro
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNro

type AggregateNroObject =
  | AggregateNroFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNroFields =
  | 'count'



  

export interface AggregateNroFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createNro', args?: MutationCreateNroArgs[] | false, alias?: string  } 
  | { name: 'updateNro', args?: MutationUpdateNroArgs[] | false, alias?: string  } 
  | { name: 'updateManyNroes', args?: MutationUpdateManyNroesArgs[] | false, alias?: string  } 
  | { name: 'upsertNro', args?: MutationUpsertNroArgs[] | false, alias?: string  } 
  | { name: 'deleteNro', args?: MutationDeleteNroArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNroes', args?: MutationDeleteManyNroesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createNro'
  | 'updateNro'
  | 'updateManyNroes'
  | 'upsertNro'
  | 'deleteNro'
  | 'deleteManyNroes'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateNroArgs =
  | 'data'
type MutationUpdateNroArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNroesArgs =
  | 'data'
  | 'where'
type MutationUpsertNroArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNroArgs =
  | 'where'
type MutationDeleteManyNroesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNro: {
    type: 'Nro'
    args: Record<MutationCreateNroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NroCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro> | prisma.Nro
  }
  updateNro: {
    type: 'Nro'
    args: Record<MutationUpdateNroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NroUpdateInput, where: NroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro | null> | prisma.Nro | null
  }
  updateManyNroes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNroesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NroUpdateManyMutationInput, where?: NroWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNro: {
    type: 'Nro'
    args: Record<MutationUpsertNroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NroWhereUniqueInput, create: NroCreateInput, update: NroUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro> | prisma.Nro
  }
  deleteNro: {
    type: 'Nro'
    args: Record<MutationDeleteNroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NroWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro | null> | prisma.Nro | null
  }
  deleteManyNroes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNroesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NroWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'nro', args?: SubscriptionNroArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'nro'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionNroArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  nro: {
    type: 'NroSubscriptionPayload'
    args: Record<SubscriptionNroArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NroSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NroSubscriptionPayload | null> | prisma.NroSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isAdmin', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'isAdmin'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isAdmin: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NroSubscriptionPayload

type NroSubscriptionPayloadObject =
  | NroSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NroSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NroSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Nro'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Nro | null> | prisma.Nro | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NroPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NroSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NroPreviousValues | null> | prisma.NroPreviousValues | null
  }
}
  

// Types for NroPreviousValues

type NroPreviousValuesObject =
  | NroPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'about', args?: [] | false, alias?: string  } 
  | { name: 'incomeGrants', args?: [] | false, alias?: string  } 
  | { name: 'incomeFundraising', args?: [] | false, alias?: string  } 
  | { name: 'incomeOther', args?: [] | false, alias?: string  } 
  | { name: 'expensesCampaigns', args?: [] | false, alias?: string  } 
  | { name: 'expensesCampaignSupport', args?: [] | false, alias?: string  } 
  | { name: 'expensesContributions', args?: [] | false, alias?: string  } 
  | { name: 'expensesOrgSupport', args?: [] | false, alias?: string  } 
  | { name: 'staffCampaigns', args?: [] | false, alias?: string  } 
  | { name: 'staffCampaignSupport', args?: [] | false, alias?: string  } 
  | { name: 'staffFundraising', args?: [] | false, alias?: string  } 
  | { name: 'staffOrgSupport', args?: [] | false, alias?: string  } 

type NroPreviousValuesFields =
  | 'id'
  | 'name'
  | 'about'
  | 'incomeGrants'
  | 'incomeFundraising'
  | 'incomeOther'
  | 'expensesCampaigns'
  | 'expensesCampaignSupport'
  | 'expensesContributions'
  | 'expensesOrgSupport'
  | 'staffCampaigns'
  | 'staffCampaignSupport'
  | 'staffFundraising'
  | 'staffOrgSupport'



  

export interface NroPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  about: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  incomeGrants: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  incomeFundraising: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  incomeOther: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesCampaigns: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesCampaignSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesContributions: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expensesOrgSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffCampaigns: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffCampaignSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffFundraising: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  staffOrgSupport: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  isAdmin?: boolean | null
  isAdmin_not?: boolean | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'isAdmin', alias?: string  } 
  | { name: 'isAdmin_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NroWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type NroWhereUniqueInputInputObject =
  | Extract<keyof NroWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface NroWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  about?: string | null
  about_not?: string | null
  about_in?: string[]
  about_not_in?: string[]
  about_lt?: string | null
  about_lte?: string | null
  about_gt?: string | null
  about_gte?: string | null
  about_contains?: string | null
  about_not_contains?: string | null
  about_starts_with?: string | null
  about_not_starts_with?: string | null
  about_ends_with?: string | null
  about_not_ends_with?: string | null
  incomeGrants?: number | null
  incomeGrants_not?: number | null
  incomeGrants_in?: number[]
  incomeGrants_not_in?: number[]
  incomeGrants_lt?: number | null
  incomeGrants_lte?: number | null
  incomeGrants_gt?: number | null
  incomeGrants_gte?: number | null
  incomeFundraising?: number | null
  incomeFundraising_not?: number | null
  incomeFundraising_in?: number[]
  incomeFundraising_not_in?: number[]
  incomeFundraising_lt?: number | null
  incomeFundraising_lte?: number | null
  incomeFundraising_gt?: number | null
  incomeFundraising_gte?: number | null
  incomeOther?: number | null
  incomeOther_not?: number | null
  incomeOther_in?: number[]
  incomeOther_not_in?: number[]
  incomeOther_lt?: number | null
  incomeOther_lte?: number | null
  incomeOther_gt?: number | null
  incomeOther_gte?: number | null
  expensesCampaigns?: number | null
  expensesCampaigns_not?: number | null
  expensesCampaigns_in?: number[]
  expensesCampaigns_not_in?: number[]
  expensesCampaigns_lt?: number | null
  expensesCampaigns_lte?: number | null
  expensesCampaigns_gt?: number | null
  expensesCampaigns_gte?: number | null
  expensesCampaignSupport?: number | null
  expensesCampaignSupport_not?: number | null
  expensesCampaignSupport_in?: number[]
  expensesCampaignSupport_not_in?: number[]
  expensesCampaignSupport_lt?: number | null
  expensesCampaignSupport_lte?: number | null
  expensesCampaignSupport_gt?: number | null
  expensesCampaignSupport_gte?: number | null
  expensesContributions?: number | null
  expensesContributions_not?: number | null
  expensesContributions_in?: number[]
  expensesContributions_not_in?: number[]
  expensesContributions_lt?: number | null
  expensesContributions_lte?: number | null
  expensesContributions_gt?: number | null
  expensesContributions_gte?: number | null
  expensesOrgSupport?: number | null
  expensesOrgSupport_not?: number | null
  expensesOrgSupport_in?: number[]
  expensesOrgSupport_not_in?: number[]
  expensesOrgSupport_lt?: number | null
  expensesOrgSupport_lte?: number | null
  expensesOrgSupport_gt?: number | null
  expensesOrgSupport_gte?: number | null
  staffCampaigns?: number | null
  staffCampaigns_not?: number | null
  staffCampaigns_in?: number[]
  staffCampaigns_not_in?: number[]
  staffCampaigns_lt?: number | null
  staffCampaigns_lte?: number | null
  staffCampaigns_gt?: number | null
  staffCampaigns_gte?: number | null
  staffCampaignSupport?: number | null
  staffCampaignSupport_not?: number | null
  staffCampaignSupport_in?: number[]
  staffCampaignSupport_not_in?: number[]
  staffCampaignSupport_lt?: number | null
  staffCampaignSupport_lte?: number | null
  staffCampaignSupport_gt?: number | null
  staffCampaignSupport_gte?: number | null
  staffFundraising?: number | null
  staffFundraising_not?: number | null
  staffFundraising_in?: number[]
  staffFundraising_not_in?: number[]
  staffFundraising_lt?: number | null
  staffFundraising_lte?: number | null
  staffFundraising_gt?: number | null
  staffFundraising_gte?: number | null
  staffOrgSupport?: number | null
  staffOrgSupport_not?: number | null
  staffOrgSupport_in?: number[]
  staffOrgSupport_not_in?: number[]
  staffOrgSupport_lt?: number | null
  staffOrgSupport_lte?: number | null
  staffOrgSupport_gt?: number | null
  staffOrgSupport_gte?: number | null
  AND?: NroWhereInput[]
  OR?: NroWhereInput[]
  NOT?: NroWhereInput[]
}
export type NroWhereInputInputObject =
  | Extract<keyof NroWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'about', alias?: string  } 
  | { name: 'about_not', alias?: string  } 
  | { name: 'about_in', alias?: string  } 
  | { name: 'about_not_in', alias?: string  } 
  | { name: 'about_lt', alias?: string  } 
  | { name: 'about_lte', alias?: string  } 
  | { name: 'about_gt', alias?: string  } 
  | { name: 'about_gte', alias?: string  } 
  | { name: 'about_contains', alias?: string  } 
  | { name: 'about_not_contains', alias?: string  } 
  | { name: 'about_starts_with', alias?: string  } 
  | { name: 'about_not_starts_with', alias?: string  } 
  | { name: 'about_ends_with', alias?: string  } 
  | { name: 'about_not_ends_with', alias?: string  } 
  | { name: 'incomeGrants', alias?: string  } 
  | { name: 'incomeGrants_not', alias?: string  } 
  | { name: 'incomeGrants_in', alias?: string  } 
  | { name: 'incomeGrants_not_in', alias?: string  } 
  | { name: 'incomeGrants_lt', alias?: string  } 
  | { name: 'incomeGrants_lte', alias?: string  } 
  | { name: 'incomeGrants_gt', alias?: string  } 
  | { name: 'incomeGrants_gte', alias?: string  } 
  | { name: 'incomeFundraising', alias?: string  } 
  | { name: 'incomeFundraising_not', alias?: string  } 
  | { name: 'incomeFundraising_in', alias?: string  } 
  | { name: 'incomeFundraising_not_in', alias?: string  } 
  | { name: 'incomeFundraising_lt', alias?: string  } 
  | { name: 'incomeFundraising_lte', alias?: string  } 
  | { name: 'incomeFundraising_gt', alias?: string  } 
  | { name: 'incomeFundraising_gte', alias?: string  } 
  | { name: 'incomeOther', alias?: string  } 
  | { name: 'incomeOther_not', alias?: string  } 
  | { name: 'incomeOther_in', alias?: string  } 
  | { name: 'incomeOther_not_in', alias?: string  } 
  | { name: 'incomeOther_lt', alias?: string  } 
  | { name: 'incomeOther_lte', alias?: string  } 
  | { name: 'incomeOther_gt', alias?: string  } 
  | { name: 'incomeOther_gte', alias?: string  } 
  | { name: 'expensesCampaigns', alias?: string  } 
  | { name: 'expensesCampaigns_not', alias?: string  } 
  | { name: 'expensesCampaigns_in', alias?: string  } 
  | { name: 'expensesCampaigns_not_in', alias?: string  } 
  | { name: 'expensesCampaigns_lt', alias?: string  } 
  | { name: 'expensesCampaigns_lte', alias?: string  } 
  | { name: 'expensesCampaigns_gt', alias?: string  } 
  | { name: 'expensesCampaigns_gte', alias?: string  } 
  | { name: 'expensesCampaignSupport', alias?: string  } 
  | { name: 'expensesCampaignSupport_not', alias?: string  } 
  | { name: 'expensesCampaignSupport_in', alias?: string  } 
  | { name: 'expensesCampaignSupport_not_in', alias?: string  } 
  | { name: 'expensesCampaignSupport_lt', alias?: string  } 
  | { name: 'expensesCampaignSupport_lte', alias?: string  } 
  | { name: 'expensesCampaignSupport_gt', alias?: string  } 
  | { name: 'expensesCampaignSupport_gte', alias?: string  } 
  | { name: 'expensesContributions', alias?: string  } 
  | { name: 'expensesContributions_not', alias?: string  } 
  | { name: 'expensesContributions_in', alias?: string  } 
  | { name: 'expensesContributions_not_in', alias?: string  } 
  | { name: 'expensesContributions_lt', alias?: string  } 
  | { name: 'expensesContributions_lte', alias?: string  } 
  | { name: 'expensesContributions_gt', alias?: string  } 
  | { name: 'expensesContributions_gte', alias?: string  } 
  | { name: 'expensesOrgSupport', alias?: string  } 
  | { name: 'expensesOrgSupport_not', alias?: string  } 
  | { name: 'expensesOrgSupport_in', alias?: string  } 
  | { name: 'expensesOrgSupport_not_in', alias?: string  } 
  | { name: 'expensesOrgSupport_lt', alias?: string  } 
  | { name: 'expensesOrgSupport_lte', alias?: string  } 
  | { name: 'expensesOrgSupport_gt', alias?: string  } 
  | { name: 'expensesOrgSupport_gte', alias?: string  } 
  | { name: 'staffCampaigns', alias?: string  } 
  | { name: 'staffCampaigns_not', alias?: string  } 
  | { name: 'staffCampaigns_in', alias?: string  } 
  | { name: 'staffCampaigns_not_in', alias?: string  } 
  | { name: 'staffCampaigns_lt', alias?: string  } 
  | { name: 'staffCampaigns_lte', alias?: string  } 
  | { name: 'staffCampaigns_gt', alias?: string  } 
  | { name: 'staffCampaigns_gte', alias?: string  } 
  | { name: 'staffCampaignSupport', alias?: string  } 
  | { name: 'staffCampaignSupport_not', alias?: string  } 
  | { name: 'staffCampaignSupport_in', alias?: string  } 
  | { name: 'staffCampaignSupport_not_in', alias?: string  } 
  | { name: 'staffCampaignSupport_lt', alias?: string  } 
  | { name: 'staffCampaignSupport_lte', alias?: string  } 
  | { name: 'staffCampaignSupport_gt', alias?: string  } 
  | { name: 'staffCampaignSupport_gte', alias?: string  } 
  | { name: 'staffFundraising', alias?: string  } 
  | { name: 'staffFundraising_not', alias?: string  } 
  | { name: 'staffFundraising_in', alias?: string  } 
  | { name: 'staffFundraising_not_in', alias?: string  } 
  | { name: 'staffFundraising_lt', alias?: string  } 
  | { name: 'staffFundraising_lte', alias?: string  } 
  | { name: 'staffFundraising_gt', alias?: string  } 
  | { name: 'staffFundraising_gte', alias?: string  } 
  | { name: 'staffOrgSupport', alias?: string  } 
  | { name: 'staffOrgSupport_not', alias?: string  } 
  | { name: 'staffOrgSupport_in', alias?: string  } 
  | { name: 'staffOrgSupport_not_in', alias?: string  } 
  | { name: 'staffOrgSupport_lt', alias?: string  } 
  | { name: 'staffOrgSupport_lte', alias?: string  } 
  | { name: 'staffOrgSupport_gt', alias?: string  } 
  | { name: 'staffOrgSupport_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  password?: string
  name?: string
  isAdmin?: boolean
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'isAdmin', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  password?: string | null
  name?: string | null
  isAdmin?: boolean | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'isAdmin', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  password?: string | null
  name?: string | null
  isAdmin?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'isAdmin', alias?: string  } 
  
export interface NroCreateInput {
  id?: string | null
  name?: string
  about?: string | null
  incomeGrants?: number | null
  incomeFundraising?: number | null
  incomeOther?: number | null
  expensesCampaigns?: number | null
  expensesCampaignSupport?: number | null
  expensesContributions?: number | null
  expensesOrgSupport?: number | null
  staffCampaigns?: number | null
  staffCampaignSupport?: number | null
  staffFundraising?: number | null
  staffOrgSupport?: number | null
}
export type NroCreateInputInputObject =
  | Extract<keyof NroCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'about', alias?: string  } 
  | { name: 'incomeGrants', alias?: string  } 
  | { name: 'incomeFundraising', alias?: string  } 
  | { name: 'incomeOther', alias?: string  } 
  | { name: 'expensesCampaigns', alias?: string  } 
  | { name: 'expensesCampaignSupport', alias?: string  } 
  | { name: 'expensesContributions', alias?: string  } 
  | { name: 'expensesOrgSupport', alias?: string  } 
  | { name: 'staffCampaigns', alias?: string  } 
  | { name: 'staffCampaignSupport', alias?: string  } 
  | { name: 'staffFundraising', alias?: string  } 
  | { name: 'staffOrgSupport', alias?: string  } 
  
export interface NroUpdateInput {
  name?: string | null
  about?: string | null
  incomeGrants?: number | null
  incomeFundraising?: number | null
  incomeOther?: number | null
  expensesCampaigns?: number | null
  expensesCampaignSupport?: number | null
  expensesContributions?: number | null
  expensesOrgSupport?: number | null
  staffCampaigns?: number | null
  staffCampaignSupport?: number | null
  staffFundraising?: number | null
  staffOrgSupport?: number | null
}
export type NroUpdateInputInputObject =
  | Extract<keyof NroUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'about', alias?: string  } 
  | { name: 'incomeGrants', alias?: string  } 
  | { name: 'incomeFundraising', alias?: string  } 
  | { name: 'incomeOther', alias?: string  } 
  | { name: 'expensesCampaigns', alias?: string  } 
  | { name: 'expensesCampaignSupport', alias?: string  } 
  | { name: 'expensesContributions', alias?: string  } 
  | { name: 'expensesOrgSupport', alias?: string  } 
  | { name: 'staffCampaigns', alias?: string  } 
  | { name: 'staffCampaignSupport', alias?: string  } 
  | { name: 'staffFundraising', alias?: string  } 
  | { name: 'staffOrgSupport', alias?: string  } 
  
export interface NroUpdateManyMutationInput {
  name?: string | null
  about?: string | null
  incomeGrants?: number | null
  incomeFundraising?: number | null
  incomeOther?: number | null
  expensesCampaigns?: number | null
  expensesCampaignSupport?: number | null
  expensesContributions?: number | null
  expensesOrgSupport?: number | null
  staffCampaigns?: number | null
  staffCampaignSupport?: number | null
  staffFundraising?: number | null
  staffOrgSupport?: number | null
}
export type NroUpdateManyMutationInputInputObject =
  | Extract<keyof NroUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'about', alias?: string  } 
  | { name: 'incomeGrants', alias?: string  } 
  | { name: 'incomeFundraising', alias?: string  } 
  | { name: 'incomeOther', alias?: string  } 
  | { name: 'expensesCampaigns', alias?: string  } 
  | { name: 'expensesCampaignSupport', alias?: string  } 
  | { name: 'expensesContributions', alias?: string  } 
  | { name: 'expensesOrgSupport', alias?: string  } 
  | { name: 'staffCampaigns', alias?: string  } 
  | { name: 'staffCampaignSupport', alias?: string  } 
  | { name: 'staffFundraising', alias?: string  } 
  | { name: 'staffOrgSupport', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NroSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NroWhereInput | null
  AND?: NroSubscriptionWhereInput[]
  OR?: NroSubscriptionWhereInput[]
  NOT?: NroSubscriptionWhereInput[]
}
export type NroSubscriptionWhereInputInputObject =
  | Extract<keyof NroSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'isAdmin_ASC'
  | 'isAdmin_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type NroOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'about_ASC'
  | 'about_DESC'
  | 'incomeGrants_ASC'
  | 'incomeGrants_DESC'
  | 'incomeFundraising_ASC'
  | 'incomeFundraising_DESC'
  | 'incomeOther_ASC'
  | 'incomeOther_DESC'
  | 'expensesCampaigns_ASC'
  | 'expensesCampaigns_DESC'
  | 'expensesCampaignSupport_ASC'
  | 'expensesCampaignSupport_DESC'
  | 'expensesContributions_ASC'
  | 'expensesContributions_DESC'
  | 'expensesOrgSupport_ASC'
  | 'expensesOrgSupport_DESC'
  | 'staffCampaigns_ASC'
  | 'staffCampaigns_DESC'
  | 'staffCampaignSupport_ASC'
  | 'staffCampaignSupport_DESC'
  | 'staffFundraising_ASC'
  | 'staffFundraising_DESC'
  | 'staffOrgSupport_ASC'
  | 'staffOrgSupport_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  